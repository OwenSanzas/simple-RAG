# Step-by-step guide to reproduce alloc-dealloc-mismatch errors

## Example: alloc-dealloc-mismatch error in C++

### Source Code:

// example1.cpp
// alloc-dealloc-mismatch error
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char* argv[]) {

    if (argc != 2) return -1;

    switch (atoi(argv[1])) {

    case 1:
        delete[](new int[10]);
        break;
    case 2:
        delete (new int[10]);      // Boom!
        break;
    default:
        printf("arguments: 1: no error 2: runtime error\n");
        return -1;
    }

    return 0;
}

### Reproduction Steps:

1. Open a Visual Studio 2019 version 16.9 or later developer command prompt.
2. Run the following command to compile the example:
   cl example1.cpp /fsanitize=address /Zi
3. Set the AddressSanitizer option to detect alloc-dealloc mismatch:
   set ASAN_OPTIONS=alloc_dealloc_mismatch=1
4. Run the compiled executable using Visual Studio Debugger with the argument `2` to trigger the error:
   devenv /debugexe example1.exe 2
5. Observe the AddressSanitizer output for alloc-dealloc-mismatch error.

Expected Output:
   AddressSanitizer: alloc-dealloc-mismatch (malloc vs delete, new vs free, new[] vs delete[])
